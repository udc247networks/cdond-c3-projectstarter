version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:8}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:8}


#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
#                                                                                                   https://circleci.com/docs/2.0/caching/           
jobs:

# building front and backend##########################################################################

#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: 
#           - frontend-build-{{ checksum "package-lock.json" }}
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm i
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build-{{ checksum "package-lock.json" }}



#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: 
#             - backend-build-{{ checksum "package-lock.json" }}
#       - run:
#           name: Back-end build
#           command: |
#             cd backend
#             npm i
#             npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build-{{ checksum "package-lock.json" }}


# # testing front and backend#####################################################################################

#   test-frontend:
#     docker:
#         - image: circleci/node:13.8.0
#     steps:
#           - checkout
#           - restore_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#           - save_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#               paths:
#                 - ./node_modules
#           - run:
#               name: test
#               command: |
#                 cd frontend
#                 npm i
#                 npm test

#   test-backend:
#     docker:
#         - image: circleci/node:13.8.0
#     steps:
#           - checkout
#           - restore_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#           - save_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#               paths:
#                 - ./node_modules
#           - run:
#               name: test
#               command: |
#                 cd backend
#                 npm i
#                 npm test
            


# # scanning front and backend##################################################################################

#   scan-frontend:
#     docker:
#         - image: circleci/node:13.8.0
#     steps:
#           - checkout
#           - restore_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#           - save_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#               paths:
#                 - ./node_modules
#           - run:
#               name: audit
#               command: |
#                 cd frontend
#                 npm i
#                 npm audit --audit-level=critical

#   scan-backend:
#     docker:
#         - image: circleci/node:13.8.0
#     steps:
#           - checkout
#           - restore_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#           - save_cache:
#               key: dependency-cache-{{ checksum "package-lock.json" }}
#               paths:
#                 - ./node_modules
#           - run:
#               name: audit
#               command: |
#                 cd backend
#                 npm i
#                 npm audit fix --audit-level=critical

# deploy the infrastructure####################################################################################


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"  
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances --filters Name=instance-state-name,Values=running --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> inventory.txt
            cat inventory.txt

      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:8}" \
      #         --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:8}"  

            
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints:
            - "d1:1d:fe:4c:a7:92:72:1f:97:5f:8b:b0:07:db:f9:09"
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible
              pip install awscli 
              ansible --version
              aws --version
            
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command:  ansible-playbook -i ./.circleci/ansible/inventory.txt configure-server.yml
      # - destroy_environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:8}
      #     when: on_fail

      # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
        - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: master
        - configure-infrastructure:
            requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]